*****************Alu32******************************
.include "C:\Users\Zenger Soong\Documents\50002(JSIM)\nominal.jsim"
.include "C:\Users\Zenger Soong\Documents\50002(JSIM)\stdcell.jsim"
.include "C:\Users\Zenger Soong\Documents\50002(JSIM)\lab3checkoff_10.jsim"
***************32BITADDER************************
.subckt adder32 ALUFN[0] A[31:0] B[31:0] s[31:0] z v n
Xfa0 A0 XB0 ALUFN0 s0 c0 FA
Xfa30 A[31:1] XB[31:1] c[30:0] s[31:1] c[31:1] FA
Xor B[31:0] ALUFN0#32 XB[31:0] xor2
Xz1 s[7:0] s[15:8] s[23:16] s[31:24] p[7:0] or4
Xz2 p[3:0] p[7:4] o[1:0] or4
Xz3 o0 o1 z nor2

Xns31 s31 ns31 inverter
Xnxa31 A31 nXA31 inverter
Xnxb31 XB31 nXB31 inverter
Xv1 A31 XB31 ns31 v1 and3

Xv2 nXA31 nXB31 s31 v2 and3
Xv v1 v2 v or2
.connect s31 n
.ends

***************FullAdder( FA) ***********************

.subckt FA a b ci s co
Xxor1 a b 1 xor2
Xxor2 1 ci s xor2
Xnand1 ci 1 2 nand2
Xnand2 b a 3 nand2
Xnand3 2 3 co nand2
.ends
*****************Boolean32********************************
.subckt boole32 ALUFN[3:0] a[31:0] b[31:0] boole[31:0]

Xbool A[31:0] B[31:0] ALUFN[0]#32 ALUFN[1]#32 ALUFN[2]#32 ALUFN[3]#32 boole[31:0] mux4
.ends

********************left shift function************************
.subckt leftshift a[31:0] b[4:0] F shift[31:0]
Xmux5 b[4]#32 a[31:0] a[15:0] F#16 W[31:0] mux2
Xmux4 b[3]#32 W[31:0] W[23:0] F#8 X[31:0] mux2
Xmux3 b[2]#32 X[31:0] X[27:0] F#4 Y[31:0] mux2
Xmux2 b[1]#32 Y[31:0] Y[29:0] F#2 Z[31:0] mux2
Xmux1 b[0]#32 Z[31:0] Z[30:0] F shift[31:0] mux2
.ends
**************************Shifter*********************************
.subckt shift32 ALUFN[1:0] A[31:0] B[4:0] shift[31:0]
Xshl a[31:0] b[4:0] 0 x[31:0] leftshift
Xand1 a[31] alufn[1] outA and2
Xnew A[0:31] B[4:0] outA y[0:31] leftshift
Xmux alufn[0]#32 x[31:0] y[31:0] shift[31:0] mux2
.ends
*************************Comparator****************************************
.subckt compare32 ALUFN[2:1] z v n cmp[31:0]
Xxor n v a xor2
Xoor z a b or2 
Xmux ALUFN[1] ALUFN[2] 0 z a b cmp[0] mux4
.connect 0 cmp[31:1]
.ends
**************************Multiplier**************************************
****passes first *****
.subckt add32 a[31:0] b[31:0] ci s[31:0] co 
Xfirst a[0] b[0] ci s[0] ca_over[0] FA 
Xmiddle a[30:1] b[30:1] ca_over[29:0] s[30:1] ca_over[30:1] FA
Xend a[31] b[31] ca_over[30] s[31] co FA
.ends

.subckt multiply32 a[31:0] b[31:0] multout[31:0]
Xp0 b[0]#32 a[31:0] rowa[31:0] and2
Xp1 b[1]#32 a[31:0] rowb[31:0] and2
Xp2 b[2]#32 a[31:0] rowc[31:0] and2
Xp3 b[3]#32 a[31:0] rowd[31:0] and2
Xp4 b[4]#32 a[31:0] rowe[31:0] and2
Xp5 b[5]#32 a[31:0] rowf[31:0] and2
Xp6 b[6]#32 a[31:0] rowg[31:0] and2
Xp7 b[7]#32 a[31:0] rowh[31:0] and2
Xp8 b[8]#32 a[31:0] rowi[31:0] and2
Xp9 b[9]#32 a[31:0] rowj[31:0] and2
Xp10 b[10]#32 a[31:0] rowk[31:0] and2
Xp11 b[11]#32 a[31:0] rowl[31:0] and2
Xp12 b[12]#32 a[31:0] rowm[31:0] and2
Xp13 b[13]#32 a[31:0] rown[31:0] and2
Xp14 b[14]#32 a[31:0] rowo[31:0] and2
Xp15 b[15]#32 a[31:0] rowp[31:0] and2
Xp16 b[16]#32 a[31:0] rowq[31:0] and2
Xp17 b[17]#32 a[31:0] rowr[31:0] and2
Xp18 b[18]#32 a[31:0] rows[31:0] and2
Xp19 b[19]#32 a[31:0] rowt[31:0] and2
Xp20 b[20]#32 a[31:0] rowu[31:0] and2
Xp21 b[21]#32 a[31:0] rowv[31:0] and2
Xp22 b[22]#32 a[31:0] roww[31:0] and2
Xp23 b[23]#32 a[31:0] rowx[31:0] and2
Xp24 b[24]#32 a[31:0] rowy[31:0] and2
Xp25 b[25]#32 a[31:0] rowz[31:0] and2
Xp26 b[26]#32 a[31:0] rowaa[31:0] and2
Xp27 b[27]#32 a[31:0] rowbb[31:0] and2
Xp28 b[28]#32 a[31:0] rowcc[31:0] and2
Xp29 b[29]#32 a[31:0] rowdd[31:0] and2
Xp30 b[30]#32 a[31:0] rowee[31:0] and2
Xp31 b[31]#32 a[31:0] rowff[31:0] and2
***Hook to zero for first as no carry***
Xsum0 rowa[31:0] rowb[30:0] 0 0 suma[31:0] t0 add32 // for each row B you remove one as it doesnt go through the circuit anymore
Xsum1 suma[31:0] rowc[29:0] 0#2 0 sumb[31:0] t1 add32
Xsum2 sumb[31:0] rowd[28:0] 0#3 0 sumc[31:0] t2 add32
Xsum3 sumc[31:0] rowe[27:0] 0#4 0 sumd[31:0] t3 add32
Xsum4 sumd[31:0] rowf[26:0] 0#5 0 sume[31:0] t4 add32
Xsum5 sume[31:0] rowg[25:0] 0#6 0 sumf[31:0] t5 add32
Xsum6 sumf[31:0] rowh[24:0] 0#7 0 sumg[31:0] t6 add32
Xsum7 sumg[31:0] rowi[23:0] 0#8 0 sumh[31:0] t7 add32
Xsum8 sumh[31:0] rowj[22:0] 0#9 0 sumi[31:0] t8 add32
Xsum9 sumi[31:0] rowk[21:0] 0#10 0 sumj[31:0] t9 add32
Xsum10 sumj[31:0] rowl[20:0] 0#11 0 sumk[31:0] t10 add32
Xsum11 sumk[31:0] rowm[19:0] 0#12 0 suml[31:0] t11 add32
Xsum12 suml[31:0] rown[18:0] 0#13 0 summ[31:0] t12 add32
Xsum13 summ[31:0] rowo[17:0] 0#14 0 sumn[31:0] t13 add32
Xsum14 sumn[31:0] rowp[16:0] 0#15 0 sumo[31:0] t14 add32
Xsum15 sumo[31:0] rowq[15:0] 0#16 0 sump[31:0] t15 add32
Xsum16 sump[31:0] rowr[14:0] 0#17 0 sumq[31:0] t16 add32
Xsum17 sumq[31:0] rows[13:0] 0#18 0 sumr[31:0] t17 add32
Xsum18 sumr[31:0] rowt[12:0] 0#19 0 sums[31:0] t18 add32
Xsum19 sums[31:0] rowu[11:0] 0#20 0 sumt[31:0] t19 add32
Xsum20 sumt[31:0] rowv[10:0] 0#21 0 sumu[31:0] t20 add32
Xsum21 sumu[31:0] roww[9:0] 0#22 0 sumv[31:0] t21 add32
Xsum22 sumv[31:0] rowx[8:0] 0#23 0 sumw[31:0] t22 add32
Xsum23 sumw[31:0] rowy[7:0] 0#24 0 sumx[31:0] t23 add32
Xsum24 sumx[31:0] rowz[6:0] 0#25 0 sumy[31:0] t24 add32
Xsum25 sumy[31:0] rowaa[5:0] 0#26 0 sumz[31:0] t25 add32
Xsum26 sumz[31:0] rowbb[4:0] 0#27 0 sumaa[31:0] t26 add32
Xsum27 sumaa[31:0] rowcc[3:0] 0#28 0 sumbb[31:0] t27 add32
Xsum28 sumbb[31:0] rowdd[2:0] 0#29 0 sumcc[31:0] t28 add32
Xsum29 sumcc[31:0] rowee[1:0] 0#30 0 sumdd[31:0] t29 add32
Xsum30 sumdd[31:0] rowff[0] 0#31 0 multout[31:0] t30 add32

.ends




*************************checkoff6******************************************
.subckt alu ALUFN[5:0] A[31:0] B[31:0] alu[31:0] z v n 
Xadd ALUFN0 A[31:0] B[31:0] add[31:0] z v n adder32
Xbool ALUFN[3:0] A[31:0] B[31:0] bool[31:0] boole32
Xshift ALUFN[1:0] A[31:0] B[4:0] shift[31:0] shift32
Xcmp ALUFN[2:1] z v n cmp[31:0] compare32
*XmuxC6 ALUFN[4]#32 ALUFN[5]#32 add[31:0] bool[31:0] shift[31:0] cmp[31:0] alu[31:0] mux4
Xmult A[31:0] B[31:0] multout[31:0] multiply32
XMultAdd ALUFN1#32 add[31:0] multout[31:0] arith[31:0] mux2 
Xfinal ALUFN[4]#32 ALUFN[5]#32 arith[31:0] bool[31:0] shift[31:0] cmp[31:0] alu[31:0] mux4
.ends
